#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <webots/robot.h>
#include <webots/motor.h>
#include <webots/distance_sensor.h>
#include <webots/gps.h>
#include <webots/light_sensor.h>

// Constants
#define NUM_DISTANCE_SENSORS 8
#define NUM_LIGHT_SENSORS 8
#define MAX_SPEED 6.28
#define BASE_SPEED 3.0
#define WALL_THRESHOLD 200
#define WALL_FOLLOW_THRESHOLD 150  // Threshold for maintaining distance from wall
#define FRONT_WALL_THRESHOLD 150   // Threshold for detecting front wall
#define TURN_SPEED 2.0
#define GPS_THRESHOLD 0.05
#define LIGHT_THRESHOLD 0.07

// Robot states
typedef enum {
    STATE_FIND_WALL,
    STATE_FOLLOW_WALL,
    STATE_SEEK_LIGHT,
    STATE_FINISHED
} RobotState;

// Robot components
static WbDeviceTag distance_sensors[NUM_DISTANCE_SENSORS];
static WbDeviceTag light_sensors[NUM_LIGHT_SENSORS];
static WbDeviceTag left_motor, right_motor;
static WbDeviceTag gps;

// Position tracking
static struct {
    double x;
    double y;
} start_position;

// Light tracking
static double brightest_light = INFINITY;
static double brightest_position[3] = {0.0, 0.0, 0.0};
static RobotState current_state = STATE_FIND_WALL;
static double exploration_start_time;

void init_robot() {
    wb_robot_init();
    int time_step = wb_robot_get_basic_time_step();
    
    // Initialize distance sensors
    for (int i = 0; i < NUM_DISTANCE_SENSORS; i++) {
        char sensor_name[4];
        sprintf(sensor_name, "ps%d", i);
        distance_sensors[i] = wb_robot_get_device(sensor_name);
        wb_distance_sensor_enable(distance_sensors[i], time_step);
    }
    
    // Initialize light sensors
    for (int i = 0; i < NUM_LIGHT_SENSORS; i++) {
        char sensor_name[4];
        sprintf(sensor_name, "ls%d", i);
        light_sensors[i] = wb_robot_get_device(sensor_name);
        wb_light_sensor_enable(light_sensors[i], time_step);
    }
    
    // Initialize motors
    left_motor = wb_robot_get_device("left wheel motor");
    right_motor = wb_robot_get_device("right wheel motor");
    wb_motor_set_position(left_motor, INFINITY);
    wb_motor_set_position(right_motor, INFINITY);
    
    // Initialize GPS
    gps = wb_robot_get_device("gps");
    wb_gps_enable(gps, time_step);
    
    exploration_start_time = wb_robot_get_time();
}

void record_start_position() {
    const double *gps_values = wb_gps_get_values(gps);
    start_position.x = gps_values[0];
    start_position.y = gps_values[1];
    printf("Start position: (%.2f, %.2f)\n", start_position.x, start_position.y);
}

int is_at_start() {
    const double *gps_values = wb_gps_get_values(gps);
    double dx = gps_values[0] - start_position.x;
    double dy = gps_values[1] - start_position.y;
    double distance = sqrt(dx * dx + dy * dy);
    return distance < GPS_THRESHOLD && wb_robot_get_time() - exploration_start_time > 20.0;
}

void update_light_reading() {
    double current_light = 0;
    for (int i = 0; i < NUM_LIGHT_SENSORS; i++) {
        current_light += wb_light_sensor_get_value(light_sensors[i]);
    }
    current_light /= NUM_LIGHT_SENSORS;
    
    if (current_light < brightest_light) {
        brightest_light = current_light;
        const double *gps_values = wb_gps_get_values(gps);
        memcpy(brightest_position, gps_values, 3 * sizeof(double));
        printf("New brightest spot: %.2f at (%.2f, %.2f)\n", 
               brightest_light, brightest_position[0], brightest_position[1]);
    }
}

int is_at_brightest_spot() {
    const double *gps_values = wb_gps_get_values(gps);
    double dx = gps_values[0] - brightest_position[0];
    double dy = gps_values[1] - brightest_position[1];
    return sqrt(dx * dx + dy * dy) < LIGHT_THRESHOLD;
}

void read_sensors(double *distances) {
    for (int i = 0; i < NUM_DISTANCE_SENSORS; i++) {
        distances[i] = wb_distance_sensor_get_value(distance_sensors[i]);
    }
}

void set_motor_speeds(double left_speed, double right_speed) {
    left_speed = fmax(-MAX_SPEED, fmin(MAX_SPEED, left_speed));
    right_speed = fmax(-MAX_SPEED, fmin(MAX_SPEED, right_speed));
    
    wb_motor_set_velocity(left_motor, left_speed);
    wb_motor_set_velocity(right_motor, right_speed);
}

void wall_following_behavior(double *distances, double *left_speed, double *right_speed) {
    // Get relevant sensor readings
    double front_left = distances[7];   // Front-left sensor
    double front = distances[0];        // Front sensor
    double front_right = distances[1];  // Front-right sensor
    double right = distances[2];        // Right sensor
    
    // Check if there's a wall directly in front
    if (front > FRONT_WALL_THRESHOLD || front_left > FRONT_WALL_THRESHOLD || front_right > FRONT_WALL_THRESHOLD) {
        // Turn left to avoid front wall
        *left_speed = -TURN_SPEED;
        *right_speed = TURN_SPEED;
        return;
    }
    
    // Calculate error for wall following (try to maintain constant distance from right wall)
    double error = WALL_FOLLOW_THRESHOLD - right;
    
    // If too far from wall, turn right
    if (error > 50) {
        *left_speed = BASE_SPEED;
        *right_speed = BASE_SPEED * 0.5;
    }
    // If too close to wall, turn left
    else if (error < -50) {
        *left_speed = BASE_SPEED * 0.5;
        *right_speed = BASE_SPEED;
    }
    // Otherwise, go straight while making minor adjustments
    else {
        double correction = error * 0.01;  // Proportional correction
        *left_speed = BASE_SPEED + correction;
        *right_speed = BASE_SPEED - correction;
    }
}

void light_seeking_behavior(double *left_speed, double *right_speed) {
    double left_light = 0, right_light = 0;
    double distances[NUM_DISTANCE_SENSORS];
    read_sensors(distances);
    
    // Calculate total light from left and right sides
    for (int i = 0; i < NUM_LIGHT_SENSORS / 2; i++) {
        left_light += wb_light_sensor_get_value(light_sensors[i]);
        right_light += wb_light_sensor_get_value(light_sensors[i + NUM_LIGHT_SENSORS / 2]);
    }
    
    // Avoid walls while seeking light
    double front_wall = distances[0];
    double front_left = distances[7];
    double front_right = distances[1];
    
    if (front_wall > FRONT_WALL_THRESHOLD || 
        front_left > FRONT_WALL_THRESHOLD || 
        front_right > FRONT_WALL_THRESHOLD) {
        *left_speed = -TURN_SPEED;
        *right_speed = TURN_SPEED;
        return;
    }
    
    // Move towards brighter side
    double light_difference = left_light - right_light;
    double turn_factor = 0.3 * (light_difference / (left_light + right_light));
    
    *left_speed = BASE_SPEED * (1 - turn_factor);
    *right_speed = BASE_SPEED * (1 + turn_factor);
}

int main() {
    init_robot();
    int time_step = wb_robot_get_basic_time_step();
    record_start_position();
    
    printf("Starting maze exploration...\n");
    
    while (wb_robot_step(time_step) != -1) {
        double left_speed = 0, right_speed = 0;
        double distances[NUM_DISTANCE_SENSORS];
        read_sensors(distances);
        
        switch (current_state) {
            case STATE_FIND_WALL:
                // Move forward until finding a wall
                if (distances[0] > WALL_THRESHOLD || distances[2] > WALL_THRESHOLD) {
                    current_state = STATE_FOLLOW_WALL;
                    printf("Wall found, starting wall following\n");
                } else {
                    left_speed = BASE_SPEED;
                    right_speed = BASE_SPEED;
                }
                break;
                
            case STATE_FOLLOW_WALL:
                wall_following_behavior(distances, &left_speed, &right_speed);
                update_light_reading();
                
                if (is_at_start()) {
                    printf("Maze exploration complete. Moving to light source.\n");
                    current_state = STATE_SEEK_LIGHT;
                }
                break;
                
            case STATE_SEEK_LIGHT:
                light_seeking_behavior(&left_speed, &right_speed);
                
                if (is_at_brightest_spot()) {
                    printf("Reached brightest spot! Mission complete.\n");
                    current_state = STATE_FINISHED;
                    left_speed = 0;
                    right_speed = 0;
                }
                break;
                
            case STATE_FINISHED:
                left_speed = 0;
                right_speed = 0;
                break;
        }
        
        set_motor_speeds(left_speed, right_speed);
    }
    
    wb_robot_cleanup();
    return 0;
}
